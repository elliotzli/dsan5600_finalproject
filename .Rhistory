names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
aic_row <- paste("Model fitting with minimum AIC:\n", toString(temp[which.min(temp$AIC),]))
aicc_row <- paste("\nModel fitting with minimum AICc:\n", toString(temp[which.min(temp$AICc),]))
bic_row <- paste("\nModel fitting with minimum BIC:\n", toString(temp[which.min(temp$BIC),]))
all_rows <- paste(aic_row, aicc_row, bic_row, sep="\n")
cat(all_rows)
auto.arima(ts)
library(zoo)
library(TTR)
library(readr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(knitr)
df <- read_excel('data/data/cpi-u.xlsx')
df <- na.omit(df)
df$Date <- as.Date(df[[1]])
df$Yield <- as.numeric(df[[2]])
ts = ts(df$Yield, start=decimal_date(as.Date("1947-01-01")), frequency = 12)
autoplot(ts) + ggtitle("CPI Over Time") + xlab("Year") + ylab("CPI") +
theme(
panel.background = element_blank())
ggAcf(log(ts),40) + ggtitle("ACF Plot") +
theme(
panel.background = element_blank())
adf_test <- adf.test(ts)
cat("Augmented Dickey-Fuller Test Results:\n")
cat("Test Statistic:", adf_test$statistic, " ","P-value:", adf_test$p.value)
if (adf_test$p.value < 0.05) {
cat("The time series is stationary based on the ADF test.\n")
} else {
cat("The time series is not stationary based on the ADF test.\n")}
ts <- log(ts)
ts_diff <- ts %>% diff()
ts_diff2 <- ts %>% diff() %>% diff()
ggAcf(ts_diff,40) + ggtitle("ACF Plot After Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff,40) + ggtitle("PACF Plot After Differencing") + theme(panel.background = element_blank())
ggAcf(ts_diff2,40) + ggtitle("ACF Plot After Second Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff2,40) + ggtitle("PACF Plot After Second Differencing") + theme(panel.background = element_blank())
i=1
temp= data.frame()
ls=matrix(rep(NA,6*12),nrow=12)
for (p in 0:3)
{
for(q in 0:2)
{
for(d in 2)
{
if(p+d+q<=8)
{
model<- Arima(ts,order=c(p,d,q),include.drift=TRUE)
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
aic_row <- paste("Model fitting with minimum AIC:\n", toString(temp[which.min(temp$AIC),]))
aicc_row <- paste("\nModel fitting with minimum AICc:\n", toString(temp[which.min(temp$AICc),]))
bic_row <- paste("\nModel fitting with minimum BIC:\n", toString(temp[which.min(temp$BIC),]))
all_rows <- paste(aic_row, aicc_row, bic_row, sep="\n")
cat(all_rows)
auto.arima(ts)
# (3,2,2)
model_output1 <- capture.output(sarima((ts),3,2,2))
cat("\n**************************************************************************\n")
# (0,2,2)
model_output2 <- capture.output(sarima((ts),0,2,2))
cat("\n**************************************************************************\n")
# auto.arima (1,2,1)(2,0,0)[12]
model_output3 <- capture.output(sarima((ts),1,2,1,2,0,0,12))
cat("\n**************************************************************************\n")
cat("ARIMA(3,2,2):\n",model_output1,sep="\n")
cat("\n**************************************************************************\n")
cat("ARIMA(0,2,2):\n",model_output2,sep="\n")
cat("\n**************************************************************************\n")
cat("auto.arima (1,2,1)(2,0,0)[12]:\n",model_output3,sep="\n")
cat("\n**************************************************************************\n")
fit <- Arima(ts, order=c(0,2,2))
summary(fit)
ts %>%
Arima(order=c(0,2,2),include.drift = TRUE) %>%
forecast(h=60) %>%
autoplot() +
ylab("Prediction") + xlab("Year") + ggtitle("log(CPI) Prediction") + theme(panel.background = element_blank())
cat("ARIMA Model Accuracy Metrics:\n")
pred <- forecast(fit, 60)
acc_pred <- accuracy(pred)
print(acc_pred)
cat("\nMean Model Accuracy Metrics:\n")
f1 <- meanf(ts, h=60)
acc_f1 <- accuracy(f1)
print(acc_f1)
cat("\nNaive Model Accuracy Metrics:\n")
f2 <- naive(ts, h=60)
acc_f2 <- accuracy(f2)
print(acc_f2)
cat("\nSeasonal Naive Model Accuracy Metrics:\n")
f3 <- snaive(ts, h=60)
acc_f3 <- accuracy(f3)
print(acc_f3)
cat("\nRandom Walk with Drift Model Accuracy Metrics:\n")
f4 <- rwf(ts, drift=TRUE, h=60)
acc_f4 <- accuracy(f4)
print(acc_f4)
all_acc <- data.frame(
ARIMA = acc_pred[1, ],
Mean = acc_f1[1, ],
Naive = acc_f2[1, ],
SeasonalNaive = acc_f3[1, ],
Drift = acc_f4[1, ]
)
all_acc <- t(all_acc)
lowest_scores <- apply(all_acc, 2, function(x) {
names(which.min(x))
})
cat("\nModel with the best Accuracy Metrics:\n",lowest_scores)
autoplot(ts) +
autolayer(meanf(ts, h=60),
series="Mean", PI=FALSE) +
autolayer(naive(ts, h=60),
series="Na誰ve", PI=FALSE) +
autolayer(snaive(ts, h=60),
series="SNa誰ve", PI=FALSE)+
autolayer(rwf(ts, h=60, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit,60),
series="ARIMA",PI=FALSE) +
guides(colour=guide_legend(title="Forecast")) +
ylab("Prediction") + xlab("Year") + ggtitle("Benchmark Evaluation") + theme(panel.background = element_blank())
df <- read_excel('data/data/GDP.xlsx')
df <- na.omit(df)
df$Date <- as.Date(df[[1]])
df$Yield <- as.numeric(df[[2]])
ts = ts(df$Yield, start=decimal_date(as.Date("1947-01-01")), frequency = 4)
autoplot(ts) + ggtitle("GDP Over Time") + xlab("Year") + ylab("GDP in billion") +
theme(
panel.background = element_blank())
ggAcf(log(ts),40) + ggtitle("ACF Plot") +
theme(
panel.background = element_blank())
adf_test <- adf.test(ts)
cat("Augmented Dickey-Fuller Test Results:\n")
cat("Test Statistic:", adf_test$statistic, " ","P-value:", adf_test$p.value)
if (adf_test$p.value < 0.05) {
cat("The time series is stationary based on the ADF test.\n")
} else {
cat("The time series is not stationary based on the ADF test.\n")}
ts <- log(ts)
ts_diff <- ts %>% diff()
ts_diff2 <- ts %>% diff() %>% diff()
ggAcf(ts_diff,40) + ggtitle("ACF Plot After Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff,40) + ggtitle("PACF Plot After Differencing") + theme(panel.background = element_blank())
ggAcf(ts_diff2,40) + ggtitle("ACF Plot After Second Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff2,40) + ggtitle("PACF Plot After Second Differencing") + theme(panel.background = element_blank())
i=1
temp= data.frame()
ls=matrix(rep(NA,6*10),nrow=10)
for (p in 1:5)
{
for(q in 1)
{
for(d in 1:2)
{
if(p+d+q<=8)
{
model<- Arima(ts,order=c(p,d,q),include.drift=TRUE)
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
aic_row <- paste("Model fitting with minimum AIC:\n", toString(temp[which.min(temp$AIC),]))
aicc_row <- paste("\nModel fitting with minimum AICc:\n", toString(temp[which.min(temp$AICc),]))
bic_row <- paste("\nModel fitting with minimum BIC:\n", toString(temp[which.min(temp$BIC),]))
all_rows <- paste(aic_row, aicc_row, bic_row, sep="\n")
cat(all_rows)
auto.arima(ts)
# (1,1,1)
model_output1 <- capture.output(sarima((ts),1,1,1))
cat("\n**************************************************************************\n")
# auto.arima (0,2,3)(1,0,1)[4]
model_output2 <- capture.output(sarima((ts),0,2,3,1,0,1,4))
cat("\n**************************************************************************\n")
cat("ARIMA(1,1,1):\n",model_output1,sep="\n")
cat("\n**************************************************************************\n")
cat("auto.arima (0,2,3)(1,0,1)[4]:\n",model_output2,sep="\n")
cat("\n**************************************************************************\n")
fit <- Arima(ts, order=c(1,1,1))
summary(fit)
ts %>%
Arima(order=c(1,1,1),include.drift = TRUE) %>%
forecast(h=60) %>%
autoplot() +
ylab("Prediction") + xlab("Year") + ggtitle("log(GDP) Prediction") + theme(panel.background = element_blank())
cat("ARIMA Model Accuracy Metrics:\n")
pred <- forecast(fit, 20)
acc_pred <- accuracy(pred)
print(acc_pred)
cat("\nMean Model Accuracy Metrics:\n")
f1 <- meanf(ts, h=20)
acc_f1 <- accuracy(f1)
print(acc_f1)
cat("\nNaive Model Accuracy Metrics:\n")
f2 <- naive(ts, h=20)
acc_f2 <- accuracy(f2)
print(acc_f2)
cat("\nSeasonal Naive Model Accuracy Metrics:\n")
f3 <- snaive(ts, h=20)
acc_f3 <- accuracy(f3)
print(acc_f3)
cat("\nRandom Walk with Drift Model Accuracy Metrics:\n")
f4 <- rwf(ts, drift=TRUE, h=20)
acc_f4 <- accuracy(f4)
print(acc_f4)
all_acc <- data.frame(
ARIMA = acc_pred[1, ],
Mean = acc_f1[1, ],
Naive = acc_f2[1, ],
SeasonalNaive = acc_f3[1, ],
Drift = acc_f4[1, ]
)
all_acc <- t(all_acc)
lowest_scores <- apply(all_acc, 2, function(x) {
names(which.min(x))
})
cat("\nModel with the best Accuracy Metrics:\n",lowest_scores)
autoplot(ts) +
autolayer(meanf(ts, h=40),
series="Mean", PI=FALSE) +
autolayer(naive(ts, h=40),
series="Na誰ve", PI=FALSE) +
autolayer(snaive(ts, h=40),
series="SNa誰ve", PI=FALSE)+
autolayer(rwf(ts, h=40, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit,40),
series="ARIMA",PI=FALSE) +
guides(colour=guide_legend(title="Forecast")) +
ylab("Prediction") + xlab("Year") + ggtitle("Benchmark Evaluation") + theme(panel.background = element_blank())
fit <- Arima(ts, order=c(0,2,2))
summary(fit)
library(zoo)
library(TTR)
library(readr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(knitr)
df <- read_excel('data/data/cpi-u.xlsx')
df <- na.omit(df)
df$Date <- as.Date(df[[1]])
df$Yield <- as.numeric(df[[2]])
ts = ts(df$Yield, start=decimal_date(as.Date("1947-01-01")), frequency = 12)
autoplot(ts) + ggtitle("CPI Over Time") + xlab("Year") + ylab("CPI") +
theme(
panel.background = element_blank())
ggAcf(log(ts),40) + ggtitle("ACF Plot") +
theme(
panel.background = element_blank())
adf_test <- adf.test(ts)
cat("Augmented Dickey-Fuller Test Results:\n")
cat("Test Statistic:", adf_test$statistic, " ","P-value:", adf_test$p.value)
if (adf_test$p.value < 0.05) {
cat("The time series is stationary based on the ADF test.\n")
} else {
cat("The time series is not stationary based on the ADF test.\n")}
ts <- log(ts)
ts_diff <- ts %>% diff()
ts_diff2 <- ts %>% diff() %>% diff()
ggAcf(ts_diff,40) + ggtitle("ACF Plot After Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff,40) + ggtitle("PACF Plot After Differencing") + theme(panel.background = element_blank())
ggAcf(ts_diff2,40) + ggtitle("ACF Plot After Second Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff2,40) + ggtitle("PACF Plot After Second Differencing") + theme(panel.background = element_blank())
i=1
temp= data.frame()
ls=matrix(rep(NA,6*12),nrow=12)
for (p in 0:3)
{
for(q in 0:2)
{
for(d in 2)
{
if(p+d+q<=8)
{
model<- Arima(ts,order=c(p,d,q),include.drift=TRUE)
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
aic_row <- paste("Model fitting with minimum AIC:\n", toString(temp[which.min(temp$AIC),]))
aicc_row <- paste("\nModel fitting with minimum AICc:\n", toString(temp[which.min(temp$AICc),]))
bic_row <- paste("\nModel fitting with minimum BIC:\n", toString(temp[which.min(temp$BIC),]))
all_rows <- paste(aic_row, aicc_row, bic_row, sep="\n")
cat(all_rows)
auto.arima(ts)
# (3,2,2)
model_output1 <- capture.output(sarima((ts),3,2,2))
cat("\n**************************************************************************\n")
# (0,2,2)
model_output2 <- capture.output(sarima((ts),0,2,2))
cat("\n**************************************************************************\n")
# auto.arima (1,2,1)(2,0,0)[12]
model_output3 <- capture.output(sarima((ts),1,2,1,2,0,0,12))
cat("\n**************************************************************************\n")
cat("ARIMA(3,2,2):\n",model_output1,sep="\n")
cat("\n**************************************************************************\n")
cat("ARIMA(0,2,2):\n",model_output2,sep="\n")
cat("\n**************************************************************************\n")
cat("auto.arima (1,2,1)(2,0,0)[12]:\n",model_output3,sep="\n")
cat("\n**************************************************************************\n")
fit <- Arima(ts, order=c(0,2,2))
summary(fit)
ts %>%
Arima(order=c(0,2,2),include.drift = TRUE) %>%
forecast(h=60) %>%
autoplot() +
ylab("Prediction") + xlab("Year") + ggtitle("log(CPI) Prediction") + theme(panel.background = element_blank())
cat("ARIMA Model Accuracy Metrics:\n")
pred <- forecast(fit, 60)
acc_pred <- accuracy(pred)
print(acc_pred)
cat("\nMean Model Accuracy Metrics:\n")
f1 <- meanf(ts, h=60)
acc_f1 <- accuracy(f1)
print(acc_f1)
cat("\nNaive Model Accuracy Metrics:\n")
f2 <- naive(ts, h=60)
acc_f2 <- accuracy(f2)
print(acc_f2)
cat("\nSeasonal Naive Model Accuracy Metrics:\n")
f3 <- snaive(ts, h=60)
acc_f3 <- accuracy(f3)
print(acc_f3)
cat("\nRandom Walk with Drift Model Accuracy Metrics:\n")
f4 <- rwf(ts, drift=TRUE, h=60)
acc_f4 <- accuracy(f4)
print(acc_f4)
all_acc <- data.frame(
ARIMA = acc_pred[1, ],
Mean = acc_f1[1, ],
Naive = acc_f2[1, ],
SeasonalNaive = acc_f3[1, ],
Drift = acc_f4[1, ]
)
all_acc <- t(all_acc)
lowest_scores <- apply(all_acc, 2, function(x) {
names(which.min(x))
})
cat("\nModel with the best Accuracy Metrics:\n",lowest_scores)
autoplot(ts) +
autolayer(meanf(ts, h=60),
series="Mean", PI=FALSE) +
autolayer(naive(ts, h=60),
series="Na誰ve", PI=FALSE) +
autolayer(snaive(ts, h=60),
series="SNa誰ve", PI=FALSE)+
autolayer(rwf(ts, h=60, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit,60),
series="ARIMA",PI=FALSE) +
guides(colour=guide_legend(title="Forecast")) +
ylab("Prediction") + xlab("Year") + ggtitle("Benchmark Evaluation") + theme(panel.background = element_blank())
df <- read_excel('data/data/GDP.xlsx')
df <- na.omit(df)
df$Date <- as.Date(df[[1]])
df$Yield <- as.numeric(df[[2]])
ts = ts(df$Yield, start=decimal_date(as.Date("1947-01-01")), frequency = 4)
autoplot(ts) + ggtitle("GDP Over Time") + xlab("Year") + ylab("GDP in billion") +
theme(
panel.background = element_blank())
ggAcf(log(ts),40) + ggtitle("ACF Plot") +
theme(
panel.background = element_blank())
adf_test <- adf.test(ts)
cat("Augmented Dickey-Fuller Test Results:\n")
cat("Test Statistic:", adf_test$statistic, " ","P-value:", adf_test$p.value)
if (adf_test$p.value < 0.05) {
cat("The time series is stationary based on the ADF test.\n")
} else {
cat("The time series is not stationary based on the ADF test.\n")}
ts <- log(ts)
ts_diff <- ts %>% diff()
ts_diff2 <- ts %>% diff() %>% diff()
ggAcf(ts_diff,40) + ggtitle("ACF Plot After Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff,40) + ggtitle("PACF Plot After Differencing") + theme(panel.background = element_blank())
ggAcf(ts_diff2,40) + ggtitle("ACF Plot After Second Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff2,40) + ggtitle("PACF Plot After Second Differencing") + theme(panel.background = element_blank())
i=1
temp= data.frame()
ls=matrix(rep(NA,6*10),nrow=10)
for (p in 1:5)
{
for(q in 1)
{
for(d in 1:2)
{
if(p+d+q<=8)
{
model<- Arima(ts,order=c(p,d,q),include.drift=TRUE)
ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
i=i+1
}
}
}
}
temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")
temp
aic_row <- paste("Model fitting with minimum AIC:\n", toString(temp[which.min(temp$AIC),]))
aicc_row <- paste("\nModel fitting with minimum AICc:\n", toString(temp[which.min(temp$AICc),]))
bic_row <- paste("\nModel fitting with minimum BIC:\n", toString(temp[which.min(temp$BIC),]))
all_rows <- paste(aic_row, aicc_row, bic_row, sep="\n")
cat(all_rows)
auto.arima(ts)
# (1,1,1)
model_output1 <- capture.output(sarima((ts),1,1,1))
cat("\n**************************************************************************\n")
# auto.arima (0,2,3)(1,0,1)[4]
model_output2 <- capture.output(sarima((ts),0,2,3,1,0,1,4))
cat("\n**************************************************************************\n")
cat("ARIMA(1,1,1):\n",model_output1,sep="\n")
cat("\n**************************************************************************\n")
cat("auto.arima (0,2,3)(1,0,1)[4]:\n",model_output2,sep="\n")
cat("\n**************************************************************************\n")
fit <- Arima(ts, order=c(1,1,1))
summary(fit)
ts %>%
Arima(order=c(1,1,1),include.drift = TRUE) %>%
forecast(h=60) %>%
autoplot() +
ylab("Prediction") + xlab("Year") + ggtitle("log(GDP) Prediction") + theme(panel.background = element_blank())
cat("ARIMA Model Accuracy Metrics:\n")
pred <- forecast(fit, 60)
acc_pred <- accuracy(pred)
print(acc_pred)
cat("\nMean Model Accuracy Metrics:\n")
f1 <- meanf(ts, h=60)
acc_f1 <- accuracy(f1)
print(acc_f1)
cat("\nNaive Model Accuracy Metrics:\n")
f2 <- naive(ts, h=60)
acc_f2 <- accuracy(f2)
print(acc_f2)
cat("\nSeasonal Naive Model Accuracy Metrics:\n")
f3 <- snaive(ts, h=60)
acc_f3 <- accuracy(f3)
print(acc_f3)
cat("\nRandom Walk with Drift Model Accuracy Metrics:\n")
f4 <- rwf(ts, drift=TRUE, h=60)
acc_f4 <- accuracy(f4)
print(acc_f4)
all_acc <- data.frame(
ARIMA = acc_pred[1, ],
Mean = acc_f1[1, ],
Naive = acc_f2[1, ],
SeasonalNaive = acc_f3[1, ],
Drift = acc_f4[1, ]
)
all_acc <- t(all_acc)
lowest_scores <- apply(all_acc, 2, function(x) {
names(which.min(x))
})
cat("\nModel with the best Accuracy Metrics:\n",lowest_scores)
autoplot(ts) +
autolayer(meanf(ts, h=60),
series="Mean", PI=FALSE) +
autolayer(naive(ts, h=60),
series="Na誰ve", PI=FALSE) +
autolayer(snaive(ts, h=60),
series="SNa誰ve", PI=FALSE)+
autolayer(rwf(ts, h=60, drift=TRUE),
series="Drift", PI=FALSE)+
autolayer(forecast(fit,60),
series="ARIMA",PI=FALSE) +
guides(colour=guide_legend(title="Forecast")) +
ylab("Prediction") + xlab("Year") + ggtitle("Benchmark Evaluation") + theme(panel.background = element_blank())
