---
title: "ARMA/ARIMA/SARIMA Models"
subtitle: "Stationarity, Differencing, Model Fitting, Diagnostics, Forcasting, and Validation"
format:   
  html:
    smooth-scroll: true
    toc: true
    code-fold: true
    code-tools: true
    embed-resources: true
    mermaid:
      theme: neutral
bibliography: citation.bib
execute: 
  echo: false
  warning: false
---

```{r}
library(zoo)
library(TTR)
library(readr)
library(readxl)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa) 
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(knitr)
```

## ARIMA - Economic Indicator

I choose the `ARIMA` model for forecasting economic indicators because it's useful for forecasting a series where the data points are independent of the seasonal components, which is the case with the economic indicators such as `CPI`, `GDP`, `USD index`, `unemployment rate`, and `mortgage rate`. These indicators typically have underlying trends or cycles that ARIMA can address through differencing, making the data stationary before applying auto-regressive and moving average components to capture the relationships in the data.

::: panel-tabset
## CPI

##### **Data Processing**

------------------------------------------------------------------------

```{r}
df <- read_excel('data/data/cpi-u.xlsx')
df <- na.omit(df)
df$Date <- as.Date(df[[1]])
df$Yield <- as.numeric(df[[2]])
ts = ts(df$Yield, start=decimal_date(as.Date("1947-01-01")), frequency = 12)
autoplot(ts) + ggtitle("CPI Over Time") + xlab("Year") + ylab("CPI") + 
    theme(
    panel.background = element_blank())
```

<br>

##### **Stationarity Check**

------------------------------------------------------------------------

Initial assessments via `ACF` and `Augmented Dickey-Fuller` tests indicated that `CPI` required differencing due to non-stationarity. After converting to a time series and applying logarithmic transformation, first differencing was insufficient in detrending, but second differencing indicated stationarity.

```{r}
ggAcf(log(ts),40) + ggtitle("ACF Plot") + 
    theme(
    panel.background = element_blank())

adf_test <- adf.test(ts)
cat("Augmented Dickey-Fuller Test Results:\n")
cat("Test Statistic:", adf_test$statistic, " ","P-value:", adf_test$p.value)
if (adf_test$p.value < 0.05) {
  cat("The time series is stationary based on the ADF test.\n")
} else {
  cat("The time series is not stationary based on the ADF test.\n")}

ts <- log(ts)
ts_diff <- ts %>% diff()
ts_diff2 <- ts %>% diff() %>% diff()
ggAcf(ts_diff,40) + ggtitle("ACF Plot After Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff,40) + ggtitle("PACF Plot After Differencing") + theme(panel.background = element_blank())
ggAcf(ts_diff2,40) + ggtitle("ACF Plot After Second Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff2,40) + ggtitle("PACF Plot After Second Differencing") + theme(panel.background = element_blank())
```

<br>

##### **Model Fitting**

------------------------------------------------------------------------

After second differencing `CPI`, ACF shows three lags, while PACF shows four. This suggests ARIMA parameters `p = [0,1,2,3]`, `d = [2]`, `q = [0,1,2]`. I'll test these for the lowest `AIC`, `BIC`, and `AICc`, and cross-check with `auto.arima` to forecasting.

```{r}
i=1

temp= data.frame()
ls=matrix(rep(NA,6*12),nrow=12)


for (p in 0:3)
{
  for(q in 0:2)
  {
    for(d in 2)
    {
      
      if(p+d+q<=8)
      {
        model<- Arima(ts,order=c(p,d,q),include.drift=TRUE)
        ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
        i=i+1

      }
      
    }
  }
}

temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")

temp

aic_row <- paste("Model fitting with minimum AIC:\n", toString(temp[which.min(temp$AIC),]))
aicc_row <- paste("\nModel fitting with minimum AICc:\n", toString(temp[which.min(temp$AICc),]))
bic_row <- paste("\nModel fitting with minimum BIC:\n", toString(temp[which.min(temp$BIC),]))
all_rows <- paste(aic_row, aicc_row, bic_row, sep="\n")
cat(all_rows)

auto.arima(ts)
```

<br>

##### **Model Diagnostics**

------------------------------------------------------------------------

The `ARIMA(3,2,2)` model exhibits a satisfactory fit, evident from the patternless residuals and lack of autocorrelation, but its coefficients are not all statistically significant. In contrast, the `ARIMA(0,2,2)` model, while equally displaying white noise residuals and minimal autocorrelation, boasts statistically significant coefficients, lending greater weight to its predictive accuracy. The `SARIMA(1,2,1)(2,0,0)[12]` also presents a strong fit, confirmed by its residuals and significant p-values, and it outperforms the `ARIMA(0,2,2)` model in terms of lower AIC, BIC, and AICc values. Nonetheless, the simpler `ARIMA(0,2,2)` is preferred due to its adequate fit and less complexity. Both models are considered robust, with the choice between them hinging on the trade-off between simplicity and statistical thoroughness.

```{r}
# (3,2,2)
model_output1 <- capture.output(sarima((ts),3,2,2))
cat("\n**************************************************************************\n")
# (0,2,2)
model_output2 <- capture.output(sarima((ts),0,2,2))
cat("\n**************************************************************************\n")
# auto.arima (1,2,1)(2,0,0)[12] 
model_output3 <- capture.output(sarima((ts),1,2,1,2,0,0,12))

cat("\n**************************************************************************\n")
cat("ARIMA(3,2,2):\n",model_output1,sep="\n")
cat("\n**************************************************************************\n")
cat("ARIMA(0,2,2):\n",model_output2,sep="\n")
cat("\n**************************************************************************\n")
cat("auto.arima (1,2,1)(2,0,0)[12]:\n",model_output3,sep="\n")
cat("\n**************************************************************************\n")
```

```{r}
fit <- Arima(ts, order=c(0,2,2))
summary(fit)
```

<br>

Equation for `ARIMA(0,2,2)`v:

$$(1 - B)^2 X_t = (1 + \theta_1 B + \theta_2 B^2) W_t$$ <br>

<br>

##### **Forecasting**

------------------------------------------------------------------------

The graph depicts the predicted logarithm of CPI over time, extending from historical data into future projections. The black line represents the actual historical log(CPI) values, showing a general upward trend over time, which indicates that the CPI has been increasing. The blue shaded area starting around 2020 represents the forecasted values, with the shade indicating the confidence interval of the predictions.

```{r}
ts %>%
  Arima(order=c(0,2,2),include.drift = TRUE) %>%
  forecast(h=60) %>%
  autoplot() +
  ylab("Prediction") + xlab("Year") + ggtitle("log(CPI) Prediction") + theme(panel.background = element_blank())
```

<br>

##### **Benchmark Method**

------------------------------------------------------------------------

The ARIMA model forecasts (red line) are closest to the actual data, indicating a superior fit among the methods. Accuracy metrics support this, with ARIMA showing the lowest error rates across the board, suggesting high precision and minimal bias in forecasting. Other models like the Mean, Naive, and Seasonal Naive exhibit higher errors, indicating less accurate predictions. The Drift model performs better than these but is still outclassed by ARIMA. Overall, ARIMA is identified as the best model for forecasting CPI in this case.

```{r}
cat("ARIMA Model Accuracy Metrics:\n")
pred <- forecast(fit, 60)
acc_pred <- accuracy(pred)
print(acc_pred)

cat("\nMean Model Accuracy Metrics:\n")
f1 <- meanf(ts, h=60)
acc_f1 <- accuracy(f1)
print(acc_f1)

cat("\nNaive Model Accuracy Metrics:\n")
f2 <- naive(ts, h=60)
acc_f2 <- accuracy(f2)
print(acc_f2)

cat("\nSeasonal Naive Model Accuracy Metrics:\n")
f3 <- snaive(ts, h=60)
acc_f3 <- accuracy(f3)
print(acc_f3)

cat("\nRandom Walk with Drift Model Accuracy Metrics:\n")
f4 <- rwf(ts, drift=TRUE, h=60)
acc_f4 <- accuracy(f4)
print(acc_f4)

all_acc <- data.frame(
  ARIMA = acc_pred[1, ],
  Mean = acc_f1[1, ],
  Naive = acc_f2[1, ],
  SeasonalNaive = acc_f3[1, ],
  Drift = acc_f4[1, ]
)

all_acc <- t(all_acc)
lowest_scores <- apply(all_acc, 2, function(x) {
  names(which.min(x))
})
cat("\nModel with the best Accuracy Metrics:\n",lowest_scores)

autoplot(ts) +
  autolayer(meanf(ts, h=60),
            series="Mean", PI=FALSE) +
  autolayer(naive(ts, h=60),
            series="Naïve", PI=FALSE) +
  autolayer(snaive(ts, h=60),
            series="SNaïve", PI=FALSE)+
  autolayer(rwf(ts, h=60, drift=TRUE),
            series="Drift", PI=FALSE)+
  autolayer(forecast(fit,60), 
            series="ARIMA",PI=FALSE) +
  guides(colour=guide_legend(title="Forecast")) +
  ylab("Prediction") + xlab("Year") + ggtitle("Benchmark Evaluation") + theme(panel.background = element_blank())
```

## GDP

##### **Data Processing**

------------------------------------------------------------------------

```{r}
df <- read_excel('data/data/GDP.xlsx')
df <- na.omit(df)
df$Date <- as.Date(df[[1]])
df$Yield <- as.numeric(df[[2]])
ts = ts(df$Yield, start=decimal_date(as.Date("1947-01-01")), frequency = 4)
autoplot(ts) + ggtitle("GDP Over Time") + xlab("Year") + ylab("GDP in billion") + 
    theme(
    panel.background = element_blank())
```

<br>

##### **Stationarity Check**

------------------------------------------------------------------------

Initial assessments via `ACF` and `Augmented Dickey-Fuller` tests indicated that `GDP` required differencing due to non-stationarity. After converting to a time series and applying logarithmic transformation, first differencing was insufficient in detrending, but second differencing indicated stationarity.

```{r}
ggAcf(log(ts),40) + ggtitle("ACF Plot") + 
    theme(
    panel.background = element_blank())

adf_test <- adf.test(ts)
cat("Augmented Dickey-Fuller Test Results:\n")
cat("Test Statistic:", adf_test$statistic, " ","P-value:", adf_test$p.value)
if (adf_test$p.value < 0.05) {
  cat("The time series is stationary based on the ADF test.\n")
} else {
  cat("The time series is not stationary based on the ADF test.\n")}

ts <- log(ts)
ts_diff <- ts %>% diff()
ts_diff2 <- ts %>% diff() %>% diff()
ggAcf(ts_diff,40) + ggtitle("ACF Plot After Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff,40) + ggtitle("PACF Plot After Differencing") + theme(panel.background = element_blank())
ggAcf(ts_diff2,40) + ggtitle("ACF Plot After Second Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff2,40) + ggtitle("PACF Plot After Second Differencing") + theme(panel.background = element_blank())
```

<br>

##### **Model Fitting**

------------------------------------------------------------------------

After second differencing `GDP`, ACF shows one significant lag, while PACF shows five. This suggests ARIMA parameters `p = [1,2,3,4,5]`, `d = [1,2]`, `q = [1]`. I'll test these for the lowest `AIC`, `BIC`, and `AICc`, and cross-check with `auto.arima` to forecasting.

```{r}
i=1

temp= data.frame()
ls=matrix(rep(NA,6*10),nrow=10)


for (p in 1:5)
{
  for(q in 1)
  {
    for(d in 1:2)
    {
      
      if(p+d+q<=8)
      {
        model<- Arima(ts,order=c(p,d,q),include.drift=TRUE)
        ls[i,]= c(p,d,q,model$aic,model$bic,model$aicc)
        i=i+1

      }
      
    }
  }
}

temp= as.data.frame(ls)
names(temp)= c("p","d","q","AIC","BIC","AICc")

temp

aic_row <- paste("Model fitting with minimum AIC:\n", toString(temp[which.min(temp$AIC),]))
aicc_row <- paste("\nModel fitting with minimum AICc:\n", toString(temp[which.min(temp$AICc),]))
bic_row <- paste("\nModel fitting with minimum BIC:\n", toString(temp[which.min(temp$BIC),]))
all_rows <- paste(aic_row, aicc_row, bic_row, sep="\n")
cat(all_rows)

auto.arima(ts)
```

<br>

##### **Model Diagnostics**

------------------------------------------------------------------------

The first ARIMA model `(1,1,1)` shows a good fit with the lowest information criteria scores, indicating effective parameter use. The residuals suggest the model captures the data's underlying process well. The second model, which appears to be a SARIMA given the seasonal components, is more complex and doesn't offer a significantly better fit, as the information criteria scores are marginally higher and some coefficients are not statistically significant. The first model is preferable for its simplicity and performance.

```{r}
# (1,1,1)
model_output1 <- capture.output(sarima((ts),1,1,1))
cat("\n**************************************************************************\n")
# auto.arima (0,2,3)(1,0,1)[4]
model_output2 <- capture.output(sarima((ts),0,2,3,1,0,1,4))

cat("\n**************************************************************************\n")
cat("ARIMA(1,1,1):\n",model_output1,sep="\n")
cat("\n**************************************************************************\n")
cat("auto.arima (0,2,3)(1,0,1)[4]:\n",model_output2,sep="\n")
cat("\n**************************************************************************\n")
```

```{r}
fit <- Arima(ts, order=c(1,1,1))
summary(fit)
```

<br>

Equation for `ARIMA(1,1,1)`:

$$(1 - \phi B)(1 - B)X_t = (1 + \theta B)W_t$$

<br>

##### **Forecasting**

------------------------------------------------------------------------

The forecast shows a projected increase in the log-transformed GDP, with historical data indicating a good model fit. The widening confidence intervals suggest greater uncertainty in the longer term. While useful for economic planning, these predictions rely on past trends continuing unchanged and may not account for unforeseen economic events.

```{r}
ts %>%
  Arima(order=c(1,1,1),include.drift = TRUE) %>%
  forecast(h=60) %>%
  autoplot() +
  ylab("Prediction") + xlab("Year") + ggtitle("log(GDP) Prediction") + theme(panel.background = element_blank())
```

<br>

##### **Benchmark Method**

------------------------------------------------------------------------

The ARIMA model seems to closely follow the actual trend, along with the Drift model. The other models---Mean, Naive, and Seasonal Naive---diverge from the actual trend as time progresses, indicating less accuracy.

From the accuracy metrics given, the ARIMA model outperforms the others with the lowest errors across multiple measures (RMSE, MAE, MPE, MAPE, MASE, and ACF1). The Mean Model performs the worst, with the highest errors. The Naive and Seasonal Naive models also show higher errors than ARIMA but are better than the Mean Model. The Random Walk with Drift Model has metrics comparable to the ARIMA model, suggesting it is also a good fit for the data. Overall, the ARIMA and Drift models are indicated as the best for this dataset based on the provided metrics.

```{r}
cat("ARIMA Model Accuracy Metrics:\n")
pred <- forecast(fit, 60)
acc_pred <- accuracy(pred)
print(acc_pred)

cat("\nMean Model Accuracy Metrics:\n")
f1 <- meanf(ts, h=60)
acc_f1 <- accuracy(f1)
print(acc_f1)

cat("\nNaive Model Accuracy Metrics:\n")
f2 <- naive(ts, h=60)
acc_f2 <- accuracy(f2)
print(acc_f2)

cat("\nSeasonal Naive Model Accuracy Metrics:\n")
f3 <- snaive(ts, h=60)
acc_f3 <- accuracy(f3)
print(acc_f3)

cat("\nRandom Walk with Drift Model Accuracy Metrics:\n")
f4 <- rwf(ts, drift=TRUE, h=60)
acc_f4 <- accuracy(f4)
print(acc_f4)

all_acc <- data.frame(
  ARIMA = acc_pred[1, ],
  Mean = acc_f1[1, ],
  Naive = acc_f2[1, ],
  SeasonalNaive = acc_f3[1, ],
  Drift = acc_f4[1, ]
)

all_acc <- t(all_acc)
lowest_scores <- apply(all_acc, 2, function(x) {
  names(which.min(x))
})
cat("\nModel with the best Accuracy Metrics:\n",lowest_scores)

autoplot(ts) +
  autolayer(meanf(ts, h=60),
            series="Mean", PI=FALSE) +
  autolayer(naive(ts, h=60),
            series="Naïve", PI=FALSE) +
  autolayer(snaive(ts, h=60),
            series="SNaïve", PI=FALSE)+
  autolayer(rwf(ts, h=60, drift=TRUE),
            series="Drift", PI=FALSE)+
  autolayer(forecast(fit,60), 
            series="ARIMA",PI=FALSE) +
  guides(colour=guide_legend(title="Forecast")) +
  ylab("Prediction") + xlab("Year") + ggtitle("Benchmark Evaluation") + theme(panel.background = element_blank())
```
:::

## SARIMA - Treasury Security

`SARIMA` models are used for treasury yields like 3-month T-bills or 20-year T-bonds because they help predict the regular ups and downs that happen throughout the year. These ups and downs can be due to when the government borrows more, changes in how often people invest, and rules that banks follow at certain times. SARIMA can catch these patterns, making it easier to guess where yields will go next, which is very important for people who invest in these securities.

::: panel-tabset
## 3 Month Treasury Bill

##### **Data Processing**

------------------------------------------------------------------------

```{r}
df <- read_excel('data/data/3-mon-t-bill-rate.xlsx')
df <- na.omit(df)
df$Date <- as.Date(df[[1]])
df$Yield <- as.numeric(df[[2]])

df$Quarter <- floor_date(df$Date, "quarter")
df1 <- df %>%
  group_by(Quarter) %>%
  summarize(AverageYield = mean(Yield))
df1$Quarter <- format(df1$Quarter)


ts <- ts(df1$AverageYield, start=c(1982, 1), frequency=4)
autoplot(ts) +
  ggtitle("3 Month Treasury Yield Over Time - Quarterly Data") +
  xlab("Year") +
  ylab("Quarterly Yield") +
  theme(panel.background = element_blank())
```

<br>

##### **Stationarity Check**

------------------------------------------------------------------------

Initial assessments via `ACF` and `Augmented Dickey-Fuller` tests indicated that `3Mon T-Bill Yield` required differencing due to non-stationarity. After converting to a time series, first differencing and seasonal differencing alone were insufficient in detrending, but the combination of non-seasonal and seaonal differencing indicated strong stationarity.

```{r}
ggAcf(ts,40) + ggtitle("ACF Plot") + 
    theme(
    panel.background = element_blank())

plot(decompose(ts))

adf_test <- adf.test(ts)
cat("Augmented Dickey-Fuller Test Results:\n")
cat("Test Statistic:", adf_test$statistic, " ","P-value:", adf_test$p.value)
if (adf_test$p.value < 0.05) {
  cat("The time series is stationary based on the ADF test.\n")
} else {
  cat("The time series is not stationary based on the ADF test.\n")}

ts_diff <- ts %>% diff()
ggAcf(ts_diff,40) + ggtitle("ACF Plot After Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff,40) + ggtitle("PACF Plot After Differencing") + theme(panel.background = element_blank())

ts_sdiff <- ts %>% diff(lag=4)
ggAcf(ts_sdiff,40) + ggtitle("ACF Plot After Seasonal Differencing") + theme(panel.background = element_blank())
ggPacf(ts_sdiff,40) + ggtitle("PACF Plot After Seasonal Differencing") + theme(panel.background = element_blank())

ts_diff2 <- ts %>% diff() %>% diff(lag=4)
ggAcf(ts_diff2,40) + ggtitle("ACF Plot After Second Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff2,40) + ggtitle("PACF Plot After Second Differencing") + theme(panel.background = element_blank())
```

<br>

##### **Model Fitting**

------------------------------------------------------------------------

After second differencing `3 Month T-Bill Yield`, ACF shows three lags, while PACF shows four. This suggests ARIMA parameters `p = [0,1,2,3]`, `P = [2]`, `d = [1]`, `[D = 1]`, `q = [0,1,2], Q = [1]`. I'll test these for the lowest `AIC`, `BIC`, and `AICc`, and cross-check with `auto.arima` to forecasting.

```{r}
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,data){
  
  d=1
  D=1
  s=12
  i=1
  temp= data.frame()
  ls=matrix(rep(NA,9*35),nrow=35)

  for (p in p1:p2)
  {
    for(q in q1:q2)
    {
      for(P in P1:P2)
      {
        for(Q in Q1:Q2)
        {
          if(p+d+q+P+D+Q<=9)
          {
            model<- Arima(data,order=c(p,d,q),seasonal=c(P,D,Q))
            ls[i,]= c(p,d,q,P,D,Q,model$aic,model$bic,model$aicc)
            i=i+1
          }
        }
      }
    }
  }
  temp= as.data.frame(ls)
  names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
  temp
}

output=SARIMA.c(p1=0,p2=3,q1=0,q2=3,P1=2,P2=2,Q1=1,Q2=1,data=ts)

min_aic_info <- paste("Minimum AIC:", toString(output[which.min(output$AIC), ]))
min_bic_info <- paste("Minimum BIC:", toString(output[which.min(output$BIC), ]))
min_aicc_info <- paste("Minimum AICc:", toString(output[which.min(output$AICc), ]))

cat(min_aic_info, "\n")
cat(min_bic_info, "\n")
cat(min_aicc_info, "\n")

auto.arima(ts)
```

<br>

##### **Model Diagnostics**

------------------------------------------------------------------------

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
model_output1 <- capture.output(sarima((ts),1, 1, 1, 2, 1, 1, 4))
model_output1[67:97]
```

```{r}
model_output2 <- capture.output(sarima((ts),3, 1, 0, 2, 0, 0, 4))
model_output2[25:56]
```

```{r}
fit <- Arima(ts,order=c(1,1,1), seasonal=c(2,1,1))
summary(fit)
```

<br>

Equation for `SARIMA(1,1,1)(2,1,1)[4]`:

$$(1 - \phi B)(1 - B)(1 - \Phi_1 B^s)(1 - \Phi_2 B^{2s})(1 - B^s)X_t = (1 + \theta B)(1 + \Theta_1 B^s)W_t$$

<br>

##### **Forecasting**

------------------------------------------------------------------------

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
fit %>%
  forecast(h=12) %>%
  autoplot() +
  ylab("Prediction") + xlab("Year") + ggtitle("3 Month Treasury Yield Over Time - Quarterly Data Prediction") + theme(panel.background = element_blank())
```

<br>

##### **Benchmark Method**

------------------------------------------------------------------------

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
cat("SARIMA Model Accuracy Metrics:\n")
pred <- forecast(fit, 12)
acc_pred <- accuracy(pred)
print(acc_pred)

cat("\nMean Model Accuracy Metrics:\n")
f1 <- meanf(ts, h=12)
acc_f1 <- accuracy(f1)
print(acc_f1)

cat("\nNaive Model Accuracy Metrics:\n")
f2 <- naive(ts, h=12)
acc_f2 <- accuracy(f2)
print(acc_f2)

cat("\nSeasonal Naive Model Accuracy Metrics:\n")
f3 <- snaive(ts, h=12)
acc_f3 <- accuracy(f3)
print(acc_f3)

cat("\nRandom Walk with Drift Model Accuracy Metrics:\n")
f4 <- rwf(ts, drift=TRUE, h=12)
acc_f4 <- accuracy(f4)
print(acc_f4)

all_acc <- data.frame(
  SARIMA = acc_pred[1, ],
  Mean = acc_f1[1, ],
  Naive = acc_f2[1, ],
  SeasonalNaive = acc_f3[1, ],
  Drift = acc_f4[1, ]
)

all_acc <- t(all_acc)
lowest_scores <- apply(all_acc, 2, function(x) {
  names(which.min(x))
})
cat("\nModel with the best Accuracy Metrics:\n",lowest_scores)

autoplot(ts) +
  autolayer(meanf(ts, h=12),
            series="Mean", PI=FALSE) +
  autolayer(naive(ts, h=12),
            series="Naïve", PI=FALSE) +
  autolayer(snaive(ts, h=12),
            series="SNaïve", PI=FALSE)+
  autolayer(rwf(ts, h=12, drift=TRUE),
            series="Drift", PI=FALSE)+
  autolayer(forecast(fit,12), 
            series="SARIMA",PI=FALSE) +
  guides(colour=guide_legend(title="Forecast")) +
  ylab("Prediction") + xlab("Year") + ggtitle("Benchmark Evaluation") + theme(panel.background = element_blank())
```

<br>

**Cross Validation**

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
split_index <- floor(length(ts) * 0.4)
train_size <- split_index
test_size <- length(ts) - split_index
errors <- data.frame(err1=rep(NA, test_size), err2=rep(NA, test_size), err3=rep(NA, test_size), err4=rep(NA, test_size))

for(i in 1:test_size) {
  xtrain <- ts[1:(train_size+i-1)]
  xtest <- ts[train_size+i]
  
  fit1 <- Arima(xtrain, order=c(1,1,1), seasonal=list(order=c(2,1,1), period=4), include.drift=FALSE, method="ML")
  fcast1 <- forecast(fit1, h=1) 
  
  fit2 <- Arima(xtrain, order=c(3,1,0), seasonal=list(order=c(2,0,0), period=4), include.drift=FALSE, method="ML")
  fcast2 <- forecast(fit2, h=1) 
  
  errors$err1[i] <- abs(fcast1$mean - xtest) 
  errors$err2[i] <- abs(fcast2$mean - xtest) 
  errors$err3[i] <- (fcast1$mean - xtest)^2 
  errors$err4[i] <- (fcast2$mean - xtest)^2 
}

MAE1 <- mean(errors$err1, na.rm = TRUE)
MAE2 <- mean(errors$err2, na.rm = TRUE)
MSE1 <- mean(errors$err3, na.rm = TRUE)
MSE2 <- mean(errors$err4, na.rm = TRUE)

cat("One-Step Ahead Cross Validation\n")
cat("Model 1 - MAE:", MAE1, "MSE:", MSE1, "\n")
cat("Model 2 - MAE:", MAE2, "MSE:", MSE2, "\n")

if (MAE1 < MAE2 && MSE1 < MSE2) {
  cat("Model 1 performs better on both MAE and MSE.\n")
} else if (MAE1 < MAE2) {
  cat("Model 1 has a lower MAE but not necessarily a lower MSE.\n")
} else if (MSE1 < MSE2) {
  cat("Model 1 has a lower MSE but not necessarily a lower MAE.\n")
} else {
  cat("Model 2 performs better on both MAE and MSE.\n")
}
```

```{r}
n <- length(ts)
forecast_horizon <- 4
split_index <- floor(n * 0.4)
train_size <- split_index
test_size <- n - split_index

mae1 <- matrix(NA, test_size, forecast_horizon)
mae2 <- matrix(NA, test_size, forecast_horizon)
st <- tsp(ts)[1] + (train_size - 1) / frequency(ts)

for(i in 1:test_size) {
  xtrain <- window(ts, end=st + (i-1)/frequency(ts))
  xtest <- window(ts, start=st + i/frequency(ts), end=st + (i+forecast_horizon-1)/frequency(ts))

  if (length(xtest) < forecast_horizon) {
    next 
  }
  
  fit1 <- Arima(xtrain, order=c(1,1,1), seasonal=list(order=c(2,1,1), period=frequency(ts)),
                include.drift=FALSE, method="ML")
  fcast1 <- forecast(fit1, h=forecast_horizon)
  
  fit2 <- Arima(xtrain, order=c(3,1,0), seasonal=list(order=c(2,0,0), period=frequency(ts)),
                include.drift=FALSE, method="ML")
  fcast2 <- forecast(fit2, h=forecast_horizon)
  
  mae1[i, ] <- abs(fcast1$mean - xtest)
  mae2[i, ] <- abs(fcast2$mean - xtest)
}

plot(1:forecast_horizon, colMeans(mae1, na.rm=TRUE), type="l", col=2, xlab="Horizon", ylab="MAE", ylim=c(0, max(c(colMeans(mae1, na.rm=TRUE), colMeans(mae2, na.rm=TRUE)))))
lines(1:forecast_horizon, colMeans(mae2, na.rm=TRUE), type="l", col=3)
legend("topleft", legend=c("M1", "M2"), col=2:3, lty=1)
```

## 6 Month Treasury Bill

##### **Data Processing**

------------------------------------------------------------------------

```{r}
df <- read_excel('data/data/6-mon-t-bill-rate.xlsx')
df <- na.omit(df)
df$Date <- as.Date(df[[1]])
df$Yield <- as.numeric(df[[2]])

df$Quarter <- floor_date(df$Date, "quarter")
df1 <- df %>%
  group_by(Quarter) %>%
  summarize(AverageYield = mean(Yield))
df1$Quarter <- format(df1$Quarter)


ts <- ts(df1$AverageYield, start=c(1982, 1), frequency=4)
autoplot(ts) +
  ggtitle("6 Month Treasury Yield Over Time - Quarterly Data") +
  xlab("Year") +
  ylab("Quarterly Yield") +
  theme(panel.background = element_blank())
```

<br>

##### **Stationarity Check**

------------------------------------------------------------------------

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
ggAcf(ts,40) + ggtitle("ACF Plot") + 
    theme(
    panel.background = element_blank())

plot(decompose(ts))

adf_test <- adf.test(ts)
cat("Augmented Dickey-Fuller Test Results:\n")
cat("Test Statistic:", adf_test$statistic, " ","P-value:", adf_test$p.value)
if (adf_test$p.value < 0.05) {
  cat("The time series is stationary based on the ADF test.\n")
} else {
  cat("The time series is not stationary based on the ADF test.\n")}

ts_diff <- ts %>% diff()
ggAcf(ts_diff,40) + ggtitle("ACF Plot After Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff,40) + ggtitle("PACF Plot After Differencing") + theme(panel.background = element_blank())

ts_sdiff <- ts %>% diff(lag=4)
ggAcf(ts_sdiff,40) + ggtitle("ACF Plot After Seasonal Differencing") + theme(panel.background = element_blank())
ggPacf(ts_sdiff,40) + ggtitle("PACF Plot After Seasonal Differencing") + theme(panel.background = element_blank())

ts_diff2 <- ts %>% diff() %>% diff(lag=4)
ggAcf(ts_diff2,40) + ggtitle("ACF Plot After Second Differencing") + theme(panel.background = element_blank())
ggPacf(ts_diff2,40) + ggtitle("PACF Plot After Second Differencing") + theme(panel.background = element_blank())
```

<br>

##### **Model Fitting**

------------------------------------------------------------------------

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
SARIMA.c=function(p1,p2,q1,q2,P1,P2,Q1,Q2,data){
  
  d=1
  D=1
  s=12
  i=1
  temp= data.frame()
  ls=matrix(rep(NA,9*35),nrow=35)

  for (p in p1:p2)
  {
    for(q in q1:q2)
    {
      for(P in P1:P2)
      {
        for(Q in Q1:Q2)
        {
          if(p+d+q+P+D+Q<=9)
          {
            model<- Arima(data,order=c(p,d,q),seasonal=c(P,D,Q))
            ls[i,]= c(p,d,q,P,D,Q,model$aic,model$bic,model$aicc)
            i=i+1
          }
        }
      }
    }
  }
  temp= as.data.frame(ls)
  names(temp)= c("p","d","q","P","D","Q","AIC","BIC","AICc")
  temp
}

output=SARIMA.c(p1=0,p2=3,q1=0,q2=3,P1=2,P2=2,Q1=1,Q2=1,data=ts)

min_aic_info <- paste("Minimum AIC:", toString(output[which.min(output$AIC), ]))
min_bic_info <- paste("Minimum BIC:", toString(output[which.min(output$BIC), ]))
min_aicc_info <- paste("Minimum AICc:", toString(output[which.min(output$AICc), ]))

cat(min_aic_info, "\n")
cat(min_bic_info, "\n")
cat(min_aicc_info, "\n")

auto.arima(ts)
```

<br>

##### **Model Diagnostics**

------------------------------------------------------------------------

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
model_output1 <- capture.output(sarima((ts),0, 1, 0, 2, 0, 0, 4))
model_output1
```

```{r}
model_output2 <- capture.output(sarima((ts),2, 1, 2, 2, 1, 1, 4))
model_output2
```

```{r}
model_output3 <- capture.output(sarima((ts),1, 1, 1, 2, 1, 1, 4))
model_output3
```

```{r}
fit <- Arima(ts,order=c(2,1,2), seasonal=c(2,1,1))
summary(fit)
```

<br>

Equation for `SARIMA(2,1,2)(2,1,1)[4]`:

$$(1 - \phi_1 B - \phi_2 B^2)(1 - B)(1 - \Phi_1 B^s - \Phi_2 B^{2s})(1 - B^s)X_t = (1 + \theta_1 B + \theta_2 B^2)(1 + \Theta_1 B^s)W_t$$

<br>

##### **Forecasting**

------------------------------------------------------------------------

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
fit %>%
  forecast(h=12) %>%
  autoplot() +
  ylab("Prediction") + xlab("Year") + ggtitle("6 Month Treasury Yield Over Time - Quarterly Data Prediction") + theme(panel.background = element_blank())
```

<br>

##### **Benchmark Method**

------------------------------------------------------------------------

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
cat("SARIMA Model Accuracy Metrics:\n")
pred <- forecast(fit, 12)
acc_pred <- accuracy(pred)
print(acc_pred)

cat("\nMean Model Accuracy Metrics:\n")
f1 <- meanf(ts, h=12)
acc_f1 <- accuracy(f1)
print(acc_f1)

cat("\nNaive Model Accuracy Metrics:\n")
f2 <- naive(ts, h=12)
acc_f2 <- accuracy(f2)
print(acc_f2)

cat("\nSeasonal Naive Model Accuracy Metrics:\n")
f3 <- snaive(ts, h=12)
acc_f3 <- accuracy(f3)
print(acc_f3)

cat("\nRandom Walk with Drift Model Accuracy Metrics:\n")
f4 <- rwf(ts, drift=TRUE, h=12)
acc_f4 <- accuracy(f4)
print(acc_f4)

all_acc <- data.frame(
  SARIMA = acc_pred[1, ],
  Mean = acc_f1[1, ],
  Naive = acc_f2[1, ],
  SeasonalNaive = acc_f3[1, ],
  Drift = acc_f4[1, ]
)

all_acc <- t(all_acc)
lowest_scores <- apply(all_acc, 2, function(x) {names(which.min(x))})
cat("\nModel with the best Accuracy Metrics:\n",lowest_scores)

autoplot(ts) +
  autolayer(meanf(ts, h=12),
            series="Mean", PI=FALSE) +
  autolayer(naive(ts, h=12),
            series="Naïve", PI=FALSE) +
  autolayer(snaive(ts, h=12),
            series="SNaïve", PI=FALSE)+
  autolayer(rwf(ts, h=12, drift=TRUE),
            series="Drift", PI=FALSE)+
  autolayer(forecast(fit,12), 
            series="SARIMA",PI=FALSE) +
  guides(colour=guide_legend(title="Forecast")) +
  ylab("Prediction") + xlab("Year") + ggtitle("Benchmark Evaluation") + theme(panel.background = element_blank())
```

<br>

**Cross Validation**

<!-- xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx------------------------------------------------------------------------xxxxxxxxxxxxxxxxxx -->

```{r}
split_index <- floor(length(ts) * 0.4)
train_size <- split_index
test_size <- length(ts) - split_index
errors <- data.frame(err1=rep(NA, test_size), err2=rep(NA, test_size), err3=rep(NA, test_size), err4=rep(NA, test_size))

for(i in 1:test_size) {
  xtrain <- ts[1:(train_size+i-1)]
  xtest <- ts[train_size+i]
  
  fit1 <- Arima(xtrain, order=c(2,1,2), seasonal=list(order=c(2,1,1), period=4), include.drift=FALSE, method="ML")
  fcast1 <- forecast(fit1, h=1) 


  fit2 <- Arima(xtrain, order=c(1,1,1), seasonal=list(order=c(2,1,1), period=4), include.drift=FALSE, method="ML")
  fcast2 <- forecast(fit2, h=1) 
  
  errors$err1[i] <- abs(fcast1$mean - xtest) 
  errors$err2[i] <- abs(fcast2$mean - xtest) 
  errors$err3[i] <- (fcast1$mean - xtest)^2 
  errors$err4[i] <- (fcast2$mean - xtest)^2 
}

MAE1 <- mean(errors$err1, na.rm = TRUE)
MAE2 <- mean(errors$err2, na.rm = TRUE)
MSE1 <- mean(errors$err3, na.rm = TRUE)
MSE2 <- mean(errors$err4, na.rm = TRUE)

cat("One-Step Ahead Cross Validation\n")
cat("Model 1 - MAE:", MAE1, "MSE:", MSE1, "\n")
cat("Model 2 - MAE:", MAE2, "MSE:", MSE2, "\n")

if (MAE1 < MAE2 && MSE1 < MSE2) {
  cat("Model 1 performs better on both MAE and MSE.\n")
} else if (MAE1 < MAE2) {
  cat("Model 1 has a lower MAE but not necessarily a lower MSE.\n")
} else if (MSE1 < MSE2) {
  cat("Model 1 has a lower MSE but not necessarily a lower MAE.\n")
} else {
  cat("Model 2 performs better on both MAE and MSE.\n")
}
```

```{r}
n <- length(ts)
forecast_horizon <- 4
split_index <- floor(n * 0.4)
train_size <- split_index
test_size <- n - split_index

mae1 <- matrix(NA, test_size, forecast_horizon)
mae2 <- matrix(NA, test_size, forecast_horizon)
st <- tsp(ts)[1] + (train_size - 1) / frequency(ts)

for(i in 1:test_size) {
  xtrain <- window(ts, end=st + (i-1)/frequency(ts))
  xtest <- window(ts, start=st + i/frequency(ts), end=st + (i+forecast_horizon-1)/frequency(ts))

  if (length(xtest) < forecast_horizon) {
    next 
  }
  
  fit1 <- Arima(xtrain, order=c(2,1,2), seasonal=list(order=c(2,1,1), period=frequency(ts)),
                include.drift=FALSE, method="ML")
  fcast1 <- forecast(fit1, h=forecast_horizon)
  
  fit2 <- Arima(xtrain, order=c(1,1,1), seasonal=list(order=c(2,1,1), period=frequency(ts)),
                include.drift=FALSE, method="ML")
  fcast2 <- forecast(fit2, h=forecast_horizon)
  
  mae1[i, ] <- abs(fcast1$mean - xtest)
  mae2[i, ] <- abs(fcast2$mean - xtest)
}

plot(1:forecast_horizon, colMeans(mae1, na.rm=TRUE), type="l", col=2, xlab="Horizon", ylab="MAE", ylim=c(0, max(c(colMeans(mae1, na.rm=TRUE), colMeans(mae2, na.rm=TRUE)))))
lines(1:forecast_horizon, colMeans(mae2, na.rm=TRUE), type="l", col=3)
legend("topleft", legend=c("M1", "M2"), col=2:3, lty=1)
```
:::
